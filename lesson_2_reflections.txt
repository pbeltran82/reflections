What happens when you initialize a repository? Why do you need to do it? When I initialized the repository, the prompt says that the git repository is initialized. I need to do it to create a .git repository in my local machine so that I can commit all my changes there. 
How is the staging area different from the working directory and the repository? What value do you think it offers? The working directory is where all files are held whether or not they are added to staging area or committed. Staging area is where the files are added to be committed. The repository is where all the committed files are held. The value of the whole picture is that it gives the flexibility to be able to commit files you want and always go back to a previous version if need to. 
How can you use the staging area to make sure you have one commit per logical change? You can use the staging area by putting all the changes related to a logical change there and then committing a change. This allows one commit per logical change
What are some situations when branches would be helpful in keeping your history organized? How would branches help? It's helpful to branch when you want to do something experimental in your code without affecting the current code based. This allows you to be more flexible by allowing the developer to be more creative and trying something different due to the fact that the developer can always go back to a working branch. 
How do the diagrams help you visualize the branch structure? Diagrams give a good visual on what commits are part of certain branches. 
What is the result of merging two branches together? Why do we represent it in the diagram the way we do? The result of merging two branches is merging all the commits of both branches into one branch. We represent it in a diagram this way to see what changes have happened in both branches. 
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually? Automatic merging is great when there's no conficts in the branches. I think it's a pro to automatically merge and conflict to merge manually. The con for Merging manually is that it takes more steps to merge but at the same time you we'll see exactly what is in conflict and fix it accordingly. Either way I see great things in git for merging.